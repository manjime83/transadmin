AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  DomainName:
    Type: String
  AuthCertificateId:
    Type: String
  ApiCertificateId:
    Type: String

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Resources:
  # CUSTOM RESOURCES

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref Environment, custom, resource, lambda, role]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Effect: "Allow"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Join ["-", [!Ref ProjectName, !Ref Environment, user, pool, policy]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolDomain
                Resource:
                  - "*"

  DescribeUserPoolDomainDescriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, aws, describe, user, pool, domain]]
      Runtime: nodejs12.x
      Code: .aws/functions/aws-describe-user-pool-domain.zip
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  # USER POOL

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["-", [!Ref ProjectName, !Ref Environment, users]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Join [".", [auth, !Ref DomainName]]
      CustomDomainConfig:
        CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AuthCertificateId}

  UserPoolDomainDescription:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt DescribeUserPoolDomainDescriptionFunction.Arn
      Domain: !Join [".", [auth, !Ref DomainName]]

  UserPoolDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join [".", [!Ref DomainName, ""]]
      Name: !Join [".", [auth, !Ref DomainName, ""]]
      Type: A
      AliasTarget:
        DNSName: !GetAtt UserPoolDomainDescription.CloudFrontDistribution
        HostedZoneId: Z2FDTNDATAQYW2

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Join ["-", [!Ref ProjectName, client]]
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - email_verified
        - name
      WriteAttributes:
        - email
        - name

  # API GATEWAY

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      # Name: !Join ["-", [!Ref ProjectName, !Ref Environment]]
      BodyS3Location:
        Bucket: !Join ["-", [!Ref ProjectName, devops]]
        Key: !Join ["/", [!Ref Environment, swagger.yaml]]
      FailOnWarnings: false
      # CorsConfiguration:
      #   AllowOrigins:
      #     - "*"
      #   AllowMethods:
      #     - POST
      #     - GET
      #     - PUT
      #     - DELETE
      #   AllowHeaders:
      #     - "*"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      StageVariables:
        NOTES_TABLE: !Ref NotesTable

  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Join ["-", [!Ref ProjectName, !Ref Environment, cognito]]
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", [!Ref ProjectName, !Ref Environment, notes]]
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: noteId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Join ["-", [!Ref ProjectName, !Ref Environment]]
      Content: .aws/layers/transadmin.zip
      CompatibleRuntimes:
        - nodejs12.x

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ProjectName, !Ref Environment, lambda, role]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Effect: "Allow"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [!Ref ProjectName, !Ref Environment, dynamodb, policy]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt NotesTable.Arn
      Roles:
        - !Ref LambdaRole

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateNoteFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}

  CreateNoteFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, create, note]]
      Runtime: nodejs12.x
      Code: .aws/functions/create-note.zip
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

Outputs:
  HttpApi:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
