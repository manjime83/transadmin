AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
  DomainName:
    Type: String
  AuthCertificateId:
    Type: String
  ApiCertificateId:
    Type: String

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Resources:
  # CUSTOM RESOURCES

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Environment}-custom-resource-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Effect: "Allow"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-${Environment}-user-pool-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolDomain
                Resource:
                  - "*"

  DescribeUserPoolDomainDescriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-aws-describe-user-pool-domain
      Runtime: nodejs12.x
      Code: .aws/functions/aws-describe-user-pool-domain.zip
      Handler: index.handler
      Timeout: 10
      Role: !GetAtt CustomResourceLambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  DescribeUserPoolDomainDescriptionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DescribeUserPoolDomainDescriptionFunction}
      RetentionInDays: 30

  # USER POOL

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${Environment}-users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub auth.${DomainName}
      CustomDomainConfig:
        CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AuthCertificateId}

  UserPoolDomainDescription:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - DescribeUserPoolDomainDescriptionLogGroup
    Properties:
      ServiceToken: !GetAtt DescribeUserPoolDomainDescriptionFunction.Arn
      Domain: !Sub auth.${DomainName}

  UserPoolDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub auth.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt UserPoolDomainDescription.CloudFrontDistribution
        HostedZoneId: Z2FDTNDATAQYW2

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${ProjectName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      ReadAttributes:
        - email
        - email_verified
        - name
      WriteAttributes:
        - email
        - name

  # API GATEWAY

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${ProjectName}-${Environment}
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - !Sub https://app.${DomainName}
        AllowMethods:
          - "*"
        AllowHeaders:
          - Authorization
        ExposeHeaders:
          - "*"
        MaxAge: 0
        AllowCredentials: false

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      AutoDeploy: true
      StageVariables:
        NOTES_TABLE: !Ref NotesTable
      AccessLogSettings:
        DestinationArn: !GetAtt HttpApiLogs.Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId

  HttpApiLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${ProjectName}/${Environment}/api
      RetentionInDays: 30

  HttpApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub api.${DomainName}
      DomainNameConfigurations:
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${ApiCertificateId}

  HttpApiDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub api.${DomainName}.
      Name: !Sub api.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt HttpApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt HttpApiDomain.RegionalHostedZoneId

  HttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Sub api.${DomainName}
      ApiId: !Ref HttpApi
      Stage: !Ref HttpApiStage

  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${Environment}-${Environment}-cognito
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}

  # DYNAMODB TABLES

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-${Environment}-notes
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: noteId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true

  # LAMBDA LAYERS

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-${Environment}
      Content: .aws/layers/transadmin.zip
      CompatibleRuntimes:
        - nodejs12.x

  # LAMBDAS ROLE

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-${Environment}-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal:
              Service:
                - lambda.amazonaws.com
            Effect: "Allow"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${Environment}-${Environment}-dynamodb-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt NotesTable.Arn
      Roles:
        - !Ref LambdaRole

  # RESOURCES

  CreateNoteFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-create-note
      Runtime: nodejs12.x
      Code: .aws/functions/create-note.zip
      Handler: index.handler
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  CreateNoteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateNoteFunction}
      RetentionInDays: 30

  CreateNoteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateNoteFunction.Arn}/invocations
      PayloadFormatVersion: "2.0"

  CreateNoteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /notes
      AuthorizationType: NONE
      Target: !Sub integrations/${CreateNoteIntegration}

  CreateNotePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateNoteFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/${HttpApiStage}/*

  GetNoteListFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-get-note-list
      Runtime: nodejs12.x
      Code: .aws/functions/get-note-list.zip
      Handler: index.handler
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  GetNoteListLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetNoteListFunction}
      RetentionInDays: 30

  GetNoteListIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNoteListFunction.Arn}/invocations
      PayloadFormatVersion: "2.0"

  GetNoteListRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /notes
      AuthorizationType: NONE
      Target: !Sub integrations/${GetNoteListIntegration}

  GetNoteListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetNoteListFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/${HttpApiStage}/*

  UpdateNoteFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-update-note
      Runtime: nodejs12.x
      Code: .aws/functions/update-note.zip
      Handler: index.handler
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref LambdaLayer

  UpdateNoteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateNoteFunction}
      RetentionInDays: 30

  UpdateNoteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateNoteFunction.Arn}/invocations
      PayloadFormatVersion: "2.0"

  UpdateNoteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /notes/{id}
      AuthorizationType: NONE
      Target: !Sub integrations/${UpdateNoteIntegration}

  UpdateNotePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateNoteFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/${HttpApiStage}/*

Outputs:
  HttpApi:
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
