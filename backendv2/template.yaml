AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs12.x
    Timeout: 10

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Join ["-", [!Ref ProjectName, !Ref Environment, users]]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Join ["-", [!Ref ProjectName, client]]
      GenerateSecret: false

  TransadminApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "POST"
          - "GET"
          - "PUT"
          - "DELETE"
      Auth:
        Authorizers:
          Cognito:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
              audience:
                - !Ref UserPoolClient
            IdentitySource: $request.header.Authorization
    FailOnWarnings: true

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", [!Ref ProjectName, !Ref Environment, notes]]
      KeySchema:
        - AttributeName: noteId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: noteId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CreateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, create, note]]
      CodeUri: functions/create-note
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref TransadminApi
            Method: POST
            Path: /notes
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref NotesTable

  GetNoteListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, get, note, list]]
      CodeUri: functions/get-notes
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref TransadminApi
            Method: GET
            Path: /notes

  GetNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, get, notes]]
      CodeUri: functions/get-notes
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref TransadminApi
            Method: GET
            Path: /notes/{noteId}

  UpdateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, update, note]]
      CodeUri: functions/delete-note
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref TransadminApi
            Method: PUT
            Path: /notes/{noteId}

  DeleteNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["-", [!Ref ProjectName, !Ref Environment, delete, note]]
      CodeUri: functions/delete-note
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref TransadminApi
            Method: DELETE
            Path: /notes/{noteId}

Outputs:
  TransadminApi:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${TransadminApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
